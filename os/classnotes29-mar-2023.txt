 

Good Evening :)


Revision ---
  ISR 
  PCB 
  IVT 
  process 
  ready queue
  DMA 
  running state
   IO instruction
 
 processr
 
 
 
 
 
 process management -------
  process 
  process lifecycle
  process scheduling -----
			Ready<--------->Running 
 
		Ready state - process is waiting in ready queue 
		  |
		  |
		 CPU-Schedular
		  |
		  |
		 CPU 
		 
----------------------
  FACTORS considered by the cpu-schedular for selecting process to execute on CPU.....
  
  1.  CPU burst time  = total time needed by a process to execute all the cpu-instructions 
  
  2. IO burst time = total time needed by a process to execute all the IO instructions
  
  3.  Wait time = total time spent by the process waiting in the ready queue.
      Average wait time = total time spent by all processes waiting in the ready queue / num of processes
	  
	  Average wait time = (Tw1 + Tw2 +Tw3 +Tw4)/4
	  
	  GOOD = as low as possible
	  BAD = high avg wait time
	  
	
	4. Turnaround time = time needed by one process to complete its lifecycle. ( IO wait time is assumed to be 0 )
	           Ta  =  waittime + cpubursttime
			   Ta = Tw + Tcpu
			   
	Average Ta =  (Ta1 + Ta2 + Ta3 +....Tan)/n
	
	GOOD = as low as possible
	BAD  = high Ta 
			   
			   
    5. throughput of system  = total number of processes completed in unit time .			   
			   
		GOOD = as high as possible
		BAD = low throughput
		
	  throughput will improve if Ta improves and Tw improves
			   
			   
	6. response time = time taken by the process to respond to the user request.
	
		GOOD = as low as possible
		BAD = high response time

Scheduling Algorithm = the method used to decide which process will be selected from ready queue to run on cpu.		
	some basic common scheduling algorithms ----
	1. FIFO (FCFS )
	2. SJF
	3. Priority
	4. Round Robin scheduling
	

1. FIFO (FCFS )= the process in the front of ready queue will run first.
		
		selected process will use the cpu for how long ?
		1. till the end of process
		2. till IO instruction occurs 
		3. till some interrupt occurs 
		
 advantage :  simple , all processes in ready Q get a chance to run
 
 disadvantage : process with low Tcpu is waiting after process with high Tcpu --  Tw of the lowTcpu process will increase --- avg Ta will increase --throughput decrease.
 
		
     Process    arrivaltime    Tcpu(ms)
	   P1          0             4
	   P2          2             3
	   P3          1             5
	   
	 Find the average Tw and average Ta using FIFO scheduling algorithm 
	 
	 
	  Tw =  (starttime -arrivaltime)
	 P1 =  0-0 = 0
	 P2 = 9-2 = 7
	 P3 = 4-1 = 3
	 
	 Ta =  Tw + Tcpu
	 P1 = 0+4 = 4
	 P2 =7 + 3= 10
	 P3= 3 +5 = 8
	 
	 avg tw = (0+7+3)/3
	 avg ta = (4+10+8) /3
____________________________________________
SJF scheduling algorithm = Shortest Job First
  the process having smallest Tcpu will run first 
  
	selected process will use the cpu for how long ?
		1. till the end of process
		2. till IO instruction occurs 
		3. till some interrupt occurs 
	 
advantage : if Tcpu is small Tw is small so avg Tw improves	---it is reduced, avg ta improves so avg throughput improves

disadvantage :Tcpu cannot be predicted before running the process. This method/algorithm cannot be practically implemented.
 -------- Starvation of high Tcpu !!!
 
Two types of SJF 
  
		Ex  P1 Tcpu1=10  is running on cpu
		    after 2 ms P2 Tcpu2=2 arrives
			Tcpu2 < Tcpu1  } P2 has higher priority than P1
			
 1. Non Preemptive SJF --- P2 waits till P1 finishes 
				
 2. Preemptive SJF ---P2 will preempt P1 
		P1 returns to ready Q 
		P2 runs on cpu 
 
 
 Ex  P1 Tcpu1=10  is running on cpu
		    after 2 ms P2 Tcpu2=20 arrives
			Tcpu2 > Tcpu1  } P2 has lower priority than P1
			
 1. Non Preemptive SJF --- P2 waits till P1 finishes 
				
 2. Preemptive SJF ---P2 waits till P1 finishes
 
    
	Process  arrivaltime Tcpu
	  P1        0         7
	  P2        2         3
	  P3        3         5
	  
Find Avg Tw and avg Ta using
1. Non Preemptive SJF -  avg Tw = 4  avg Ta =9
2. Preemptive SJF 

		Tw =Sumof( starttime-arrivaltime and (resumetime-preempttime )

		P1  = (0-0) + (5-2) = 0+3 = 3
		P2  = (2-2) = 0
		P3 = (10-3) = 7
		
		Ta = Tw + Tcpu
		P1 = 3+7= 10
		P2 = 0+3 = 3
		P3 = 7+5 = 12
		
____________________________________________
HW ----------------
 process  arrivaltime  Tcpu 
   P1       0           6
   P2       2           2
   P3       3           2
   P4       5           1   
		
	calculate avg Tw and avg Ta using
		FIFO , Non Preemptive SJF and Preemptive SJF
____________________________________________

File Handling commands ----
    clear, mkdir, ls , ls -l , cd ,pwd, touch , vi, cat,tac , rmdir , rm , rm -r , cd ..
	
	chmod command for setting file and directory permissions.
	
	permissions =  read , write and execute 
	 read  r
	 write  w
	 execute x
	 
	 directory
	    read = we can execute ls commands to see content
		write = subdir mkdir , rmdir ,rm -r , rm , cp,mv
		        touch
		execute = cd 
				
				
	 file 
	   read = vi read mode , cat , tac to see content
	   write = vi edit mode 
	   execute = run the file 
	
	
	To change the permissions = chmod
	
	3 levels of permissions
	  1. owner of file or directory
	  2. group
	  3. others
	  
	
	 users = u1 u2 u3
	 group = g1 g2
	 
	 g1 = u1 u2
	 g2 = u3
	 
	 If u2 logs in and created a file alpha
	 who is the owner of the file ? u2  u
	 who is in the group ? u1 g
	 who is others ? u3  o
	 
	 chmod  ---  
	 
	 touch alpha
	 ls -l
	 rw- r-- r--
	 u   g   o
	 
	 
	 chmod u+x alpha  }}}  rwxr--r--
	 chmod go+w alpha  }}} rwxrw-rw-
	 chmod ugo-r alpha  }}} -wx-w--w-
	 
	 
	 chmod ugo=rw alpha  }}} rw-rw-rw-
	 
	 Octal way 
	 000 = 0
	 001 = 1
	 010 = 2
	 011 = 3
	 100 = 4
	 101 = 5
	 110 = 6
	 111 = 7
	 rwx
	 
	 read only = 4
	 read write = 6
	 rwx = 7
	 execute only = 1
	 
	 chmod 777 alpha  }}} rwxrwxrwx
	 chmod 744 alpha }}} rwxr--r--
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	  
	  
	  
	  
	  
	  
	  
	  
	  
	  
	
	
	
	
	

	
	
	
	
	
	
	
	













		


	  
	  
	  
	  
	  
	  
	  
	  
 
 
   
   










	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	 
	   
	   
	   
	   
	   
	   
	   
		
		
		
		
		
		
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	  
	  
 
 
 
 
 
 
 